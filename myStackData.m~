function myStackData(X, stackNum)


    
    % e.g 1000*16*924 -> 1000*(16*stackNum)*924
    % A should be 2D
    len1 = np.shape(A)
    N = len1[0]
    M = len1[1]
    out = np.zeros([N,M*stackNum])
    for i in range(0,N):
        space = int((stackNum-1)/2)  # assume stackNum as odd
        temp2 = A[np.remainder(i-space+N,N),:]
        for j in range(i-space+N+1,i+space+N+1):
            temp2 = np.concatenate((temp2,A[np.remainder(j,N),:]),axis=None)
        temp2 = (temp2 - np.mean(temp2))/(np.max(temp2)-np.min(temp2))
        out[i,:] = temp2
    return out
    
    
        # A should be 2D
    len1 = np.shape(A)
    N = len1[0]
    M = len1[1]
    out = np.zeros([N,M*stackNum])
    for i in range(0,N):
        space = int((stackNum-1)/2)  # assume stackNum as odd
        temp2 = A[np.remainder(i-space+N,N),:]
        for j in range(i-space+N+1,i+space+N+1):
            temp2 = np.concatenate((temp2,A[np.remainder(j,N),:]),axis=None)
        temp2 = (temp2 - np.mean(temp2))/(np.max(temp2)-np.min(temp2))
        out[i,:] = temp2
    return out



end